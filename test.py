import httpx
import base64
from fastapi import FastAPI, HTTPException


# This would be your existing FastAPI app instance
app = FastAPI() 


# --- Add this new test endpoint ---

@app.get("/test-jira-connection")
async def test_jira_connection():
   
    # Create the Basic Auth header in Python
    auth_string = f"{JIRA_EMAIL}:{JIRA_API_TOKEN}"
    auth_bytes = auth_string.encode("ascii")
    auth_header = f"Basic {base64.b64encode(auth_bytes).decode('ascii')}"

    # The Jira API endpoint to get all projects
    api_url = f"https://{JIRA_DOMAIN}/rest/api/3/project"

    headers = {
        "Authorization": auth_header,
        "Accept": "application/json",
    }

    print("Attempting to connect to Jira...")
    try:
        # Use httpx.AsyncClient to make the request
        async with httpx.AsyncClient() as client:
            response = await client.get(api_url, headers=headers)

        # Raise an exception if the request was not successful
        response.raise_for_status()

        projects = response.json()
        print("✅ Connection Successful!")
        
        # Return the project data as a JSON response
        return {
            "status": "Connection Successful!",
            "projects": [{"name": p.get("name"), "key": p.get("key")} for p in projects]
        }

    except httpx.HTTPStatusError as e:
        print(f"❌ Connection Failed! Status: {e.response.status_code}")
        # Forward the error from Jira to your browser for easier debugging
        raise HTTPException(
            status_code=e.response.status_code,
            detail=e.response.json()
        )
    except Exception as e:
        print(f"❌ An unexpected error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# --- Your other FastAPI endpoints would be here ---

@app.post("/create-jira-test-case")
async def create_jira_test_case():
    
    # --- IDs from Step 1 ---
    PROJECT_KEY = "SCRUM"  # The key of your project (e.g., "HC" for HealthCase)
    ISSUE_TYPE_NAME = "Task" # Or "Bug", "Story", etc.
    # ---------------------------------

    auth_string = f"{JIRA_EMAIL}:{JIRA_API_TOKEN}"
    auth_bytes = auth_string.encode("ascii")
    auth_header = f"Basic {base64.b64encode(auth_bytes).decode('ascii')}"

    api_url = f"https://{JIRA_DOMAIN}/rest/api/3/issue"

    headers = {
        "Authorization": auth_header,
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

    # This is the data for the new issue (the "test case")
    issue_payload = {
        "fields": {
            "project": {
                "key": PROJECT_KEY
            },
            "summary": "Automated Test Case: User Login Fails with Invalid Password",
            "description": {
                "type": "doc",
                "version": 1,
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "This is an automated test case generated by HealthCase AI."
                            }
                        ]
                    }
                ]
            },
            "issuetype": {
                "name": ISSUE_TYPE_NAME
            }
        }
    }

    print("Attempting to create a Jira issue...")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(api_url, headers=headers, json=issue_payload)
        
        response.raise_for_status()
        
        created_issue = response.json()
        issue_url = f"https://{JIRA_DOMAIN}/browse/{created_issue['key']}"
        
        print(f"✅ Issue created successfully! Key: {created_issue['key']}")
        print(f"   View it here: {issue_url}")

        return {
            "status": "Issue created successfully!",
            "issue_key": created_issue['key'],
            "url": issue_url
        }

    except httpx.HTTPStatusError as e:
        print(f"❌ Failed to create issue! Status: {e.response.status_code}")
        raise HTTPException(
            status_code=e.response.status_code,
            detail=e.response.json()
        )
    except Exception as e:
        print(f"❌ An unexpected error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))